package com.example.HAStundenplanApp;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentStatePagerAdapter;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.Log;
import android.widget.*;
import org.javatuples.Pair;
import android.view.*;
import com.example.HAStundenplanApp.ConfigureScheduleWeekdaysActivity.ConfigureWeekdays;
import com.example.HAStundenplanApp.ConfigureScheduleWeekdaysActivity.FragmentPagerSupport;
import net.sharksystem.sharknet.api.ImplSharkNet;
import net.sharksystem.sharknet.api.SchoolMetadata;
import net.sharksystem.sharknet.api.DummySchoolMetadata;
import net.sharksystem.sharknet.api.Profile;
import net.sharksystem.sharknet.api.ScheduleWeek;
import net.sharksystem.sharknet.api.SharkNet;

import java.util.*;

public class DigitalScheduleMainActivity extends FragmentActivity implements OnSharkNetPass {

    private static final int MENU_CREATE_PROFILE_ID = 0;
    private static final int MENU_CONFIGURE_SCHEDULE_WEEK_ID = 1;
    private static final int MENU_SETTINGS_ID = 5;
    private static final int MENU_QUIT_ID = 6;

    public static final String LESSON_NAMES = "lessonNames";
    public static final String TEACHERS = "teachers";
    public static final String ROOMS = "rooms";

    public static final String LOG_TAG = "ScheduleLog";

    private SharkNet sharkNet = new ImplSharkNet();
    public static final String METADATA_BUNDLE = "metadataBundle";
    public static final String CONFIGURED_SCHEDULE_WEEK = "configuredScheduleWeek";
    public static final String HOMEWORK = "homework";

    //static final int NUM_ITEMS = indexMatrixOfDaysWithoutWeekends.size();

    MainPagerAdapter pagerAdapter = null;

    ViewPager pager = null;


    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.digital_schedule_main);

        //Creating SchoolMetadata from DummySchoolMetadata
        //TODO SchoolMetadata can be load from SharkDB here
        sharkNet.setSchoolMetadata(sharkNet.getDummySchoolMetadata());
        SchoolMetadata schoolMetadata = sharkNet.getSchoolMetadata();
        HashMap<Integer, Date> indexMatrixOfDaysWithoutWeekends = schoolMetadata.getIndexMatrixOfDaysWithoutWeekdays(schoolMetadata.getStartSummerSemester(), schoolMetadata.getEndSummerSemester());

        //Creating local variables, they can be replaced later by UI-Controls or something
        String myNickname = "MyNickname";
        String myDeviceID = "MyDeviceID";
        String myPassword = "";

        //Creating personal profile
        Profile myProfile = sharkNet.newProfile(myNickname, myDeviceID);
        ScheduleWeek configuredScheduleWeek = myProfile.getScheduleWeek();
        if (configuredScheduleWeek == null) {
            configuredScheduleWeek = new ImplScheduleWeek();
            configuredScheduleWeek = fillConfiguredScheduleWeekWithDummyData(configuredScheduleWeek);
            myProfile.setScheduleWeek(configuredScheduleWeek);
            sharkNet.setProfile(myProfile, myPassword);
        } else throw new IllegalStateException("This configuration ScheduleWeek should be null!");
        Profile testMyProfile = sharkNet.getMyProfile();
        Log.d(LOG_TAG, testMyProfile.getContact().getNickname());
        Log.d(LOG_TAG, testMyProfile.getContact().getUID());
        Log.d(LOG_TAG, testMyProfile.getScheduleWeek().getMondayLessonNames()[0]);

        LayoutInflater inflater = this.getLayoutInflater();
        FrameLayout templateView = (FrameLayout) inflater.inflate (R.layout.digital_schedule_fragment_object, null);
        pagerAdapter = new MainPagerAdapter(indexMatrixOfDaysWithoutWeekends.size(), templateView);
        pager = (ViewPager) findViewById(R.id.main_pager);
        pager.setAdapter(pagerAdapter);

        Calendar today = Calendar.getInstance();
        int indexOfToday = schoolMetadata.searchIndexOfDayInIndexMatrix(today.getTime(), indexMatrixOfDaysWithoutWeekends);

        // Create an initial view to display; must be a subclass of FrameLayout.
        View v = createView(this, today.getTime(), schoolMetadata);
        pagerAdapter.addView(v, indexOfToday - 1);
        pagerAdapter.notifyDataSetChanged();

        //pager.setCurrentItem(indexOfToday);

        // Watch for button clicks.
        Button button = (Button) findViewById(R.id.goto_first);
        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                pager.setCurrentItem(0);
            }
        });
        button = (Button) findViewById(R.id.goto_previous_week);
        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                pager.setCurrentItem(pager.getCurrentItem() - 5);
            }
        });
        button = (Button) findViewById(R.id.goto_today);
        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                pager.setCurrentItem(indexOfToday);
                Log.d("LOG_TAG", "IndexOfToday: " + indexOfToday);
            }
        });
        button = (Button) findViewById(R.id.goto_next_week);
        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                pager.setCurrentItem(pager.getCurrentItem() + 5);
            }
        });
        button = (Button) findViewById(R.id.goto_last);
        button.setOnClickListener(new View.OnClickListener() {
            public void onClick(View v) {
                pager.setCurrentItem(indexMatrixOfDaysWithoutWeekends.size() - 1);
            }
        });
        Log.d("LOG_TAG", "Length of the summer semester: " + Integer.toString(schoolMetadata.calculateLengthOfSummerSemester()));
    }

    @Override
    public SharkNet getSharkNet() {
        return sharkNet;
    }

    @Override
    public void setSharkNet(SharkNet sharkNet) {
        sharkNet = sharkNet;
    }

    //-----------------------------------------------------------------------------
    // Here's what the app should do to add a view to the ViewPager.
    public void addView (View newPage)
    {
        int pageIndex = pagerAdapter.addView (newPage);
        // You might want to make "newPage" the currently displayed page:
        pager.setCurrentItem (pageIndex, true);
    }

    //-----------------------------------------------------------------------------
    // Here's what the app should do to remove a view from the ViewPager.
    public void removeView (View defunctPage)
    {
        int pageIndex = pagerAdapter.removeView (pager, defunctPage);
        // You might want to choose what page to display, if the current page was "defunctPage".
        if (pageIndex == pagerAdapter.getCount())
            pageIndex--;
        pager.setCurrentItem (pageIndex);
    }

    //-----------------------------------------------------------------------------
    // Here's what the app should do to get the currently displayed page.
    public View getCurrentPage ()
    {
        return pagerAdapter.getView (pager.getCurrentItem());
    }

    //-----------------------------------------------------------------------------
    // Here's what the app should do to set the currently displayed page.  "pageToShow" must
    // currently be in the adapter, or this will crash.
    public void setCurrentPage (View pageToShow)
    {
        pager.setCurrentItem (pagerAdapter.getItemPosition (pageToShow), true);
    }

    private View createView(FragmentActivity fragmentActivity, Date indexDate, SchoolMetadata schoolMetadata) {
        LayoutInflater inflater = fragmentActivity.getLayoutInflater();
        FrameLayout v = (FrameLayout) inflater.inflate (R.layout.digital_schedule_fragment_object, null);

        Calendar c = Calendar.getInstance();
        c.setTime(indexDate);

        calculateScheduleDate(schoolMetadata, v, c);

        calculateLessonTimes(schoolMetadata, v);

        initializeDigitalSchedule(sharkNet.getMyProfile().getScheduleWeek(), v, c);

        ImageButton btnWeekdayLessonZeroHomework;
        ImageButton btnWeekdayLessonOneHomework;
        ImageButton btnWeekdayLessonTwoHomework;
        ImageButton btnWeekdayLessonThreeHomework;
        ImageButton btnWeekdayLessonFourHomework;
        ImageButton btnWeekdayLessonFiveHomework;
        ImageButton btnWeekdayLessonSixHomework;
        ImageButton btnWeekdayLessonSevenHomework;
        ImageButton btnWeekdayLessonEightHomework;
        ImageButton btnWeekdayLessonNineHomework;

        btnWeekdayLessonZeroHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonZeroHomework);
        btnWeekdayLessonOneHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonOneHomework);
        btnWeekdayLessonTwoHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonTwoHomework);
        btnWeekdayLessonThreeHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonThreeHomework);
        btnWeekdayLessonFourHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonFourHomework);
        btnWeekdayLessonFiveHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonFiveHomework);
        btnWeekdayLessonSixHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonSixHomework);
        btnWeekdayLessonSevenHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonSevenHomework);
        btnWeekdayLessonEightHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonEightHomework);
        btnWeekdayLessonNineHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonNineHomework);

        btnWeekdayLessonZeroHomework.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        btnWeekdayLessonOneHomework.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        btnWeekdayLessonTwoHomework.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        btnWeekdayLessonThreeHomework.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        btnWeekdayLessonFourHomework.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        btnWeekdayLessonFiveHomework.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        btnWeekdayLessonSixHomework.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        btnWeekdayLessonSevenHomework.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        btnWeekdayLessonEightHomework.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        btnWeekdayLessonNineHomework.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
        return v;
    }

    private void calculateScheduleDate(SchoolMetadata schoolMetadata, View v, Calendar c) {
        Boolean free = false;
        for (int i = 0; i < schoolMetadata.getDayOff().size(); i++) {
            Calendar c2 = Calendar.getInstance();
            c2.setTime(schoolMetadata.getDayOff().get(i));
            if (c.get(Calendar.DAY_OF_MONTH) == c2.get(Calendar.DAY_OF_MONTH) && c.get(Calendar.MONTH) == c2.get(Calendar.MONTH) && c.get(Calendar.YEAR) == c2.get(Calendar.YEAR)) {
                free = true;
            }
        }
        String date;
        if (free) {
            date = "Kein Unterricht am " + getWeekday(c.get(Calendar.DAY_OF_WEEK)) + " den " + c.get(Calendar.DAY_OF_MONTH) + "." + (c.get(Calendar.MONTH) + 1) + "." + c.get(Calendar.YEAR);
        } else {
            date = getWeekday(c.get(Calendar.DAY_OF_WEEK)) + " der " + c.get(Calendar.DAY_OF_MONTH) + "." + (c.get(Calendar.MONTH) + 1) + "." + c.get(Calendar.YEAR);
        }
        View tv = v.findViewById(R.id.tvWeekdayDate);
        ((TextView) tv).setText(date);
    }

    private void calculateLessonTimes(SchoolMetadata schoolMetadata, View v) {
        Calendar lessonTime = Calendar.getInstance();
        lessonTime.setTime(schoolMetadata.getStartEarliestLesson());
        ConfigureWeekdays.calculateWeekdayLessonTimes(v, schoolMetadata.getBreaks(), lessonTime, schoolMetadata.getLessonDurationInMinutes());
    }

    private void initializeDigitalSchedule(ScheduleWeek configuredScheduleWeek, View v, Calendar c) {
        if (c.get(Calendar.DAY_OF_WEEK) == Calendar.MONDAY) {
            ConfigureWeekdays.initializeDigitalSchedule(v, configuredScheduleWeek.getMondayLessonNames(), configuredScheduleWeek.getMondayTeachers(),
                    configuredScheduleWeek.getMondayRooms());
        } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.TUESDAY) {
            ConfigureWeekdays.initializeDigitalSchedule(v, configuredScheduleWeek.getTuesdayLessonNames(), configuredScheduleWeek.getTuesdayTeachers(),
                    configuredScheduleWeek.getTuesdayRooms());
        } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.WEDNESDAY) {
            ConfigureWeekdays.initializeDigitalSchedule(v, configuredScheduleWeek.getWednesdayLessonNames(), configuredScheduleWeek.getWednesdayTeachers(),
                    configuredScheduleWeek.getWednesdayRooms());
        } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.THURSDAY) {
            ConfigureWeekdays.initializeDigitalSchedule(v, configuredScheduleWeek.getThursdayLessonNames(), configuredScheduleWeek.getThursdayTeachers(),
                    configuredScheduleWeek.getThursdayRooms());
        } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.FRIDAY) {
            ConfigureWeekdays.initializeDigitalSchedule(v, configuredScheduleWeek.getFridayLessonNames(), configuredScheduleWeek.getFridayTeachers(),
                    configuredScheduleWeek.getFridayRooms());
        }
    }

    public class MainPagerAdapter extends PagerAdapter
    {
        // This holds all the currently displayable views, in order from left to right.
        private ArrayList<View> views = new ArrayList<View>();

        MainPagerAdapter(int emptyViewCount, View templateView) {
            for (int i = 0; i < emptyViewCount; i++) {
                addView(templateView);
                notifyDataSetChanged();
            }
        }

        //-----------------------------------------------------------------------------
        // Used by ViewPager.  "Object" represents the page; tell the ViewPager where the
        // page should be displayed, from left-to-right.  If the page no longer exists,
        // return POSITION_NONE.
        @Override
        public int getItemPosition (Object object)
        {
            int index = views.indexOf (object);
            if (index == -1)
                return POSITION_NONE;
            else
                return index;
        }

        //-----------------------------------------------------------------------------
        // Used by ViewPager.  Called when ViewPager needs a page to display; it is our job
        // to add the page to the container, which is normally the ViewPager itself.  Since
        // all our pages are persistent, we simply retrieve it from our "views" ArrayList.
        @Override
        public Object instantiateItem (ViewGroup container, int position)
        {
            View v = views.get (position);
            container.addView (v);
            return v;
        }

        //-----------------------------------------------------------------------------
        // Used by ViewPager.  Called when ViewPager no longer needs a page to display; it
        // is our job to remove the page from the container, which is normally the
        // ViewPager itself.  Since all our pages are persistent, we do nothing to the
        // contents of our "views" ArrayList.
        @Override
        public void destroyItem (ViewGroup container, int position, Object object)
        {
            container.removeView (views.get (position));
        }

        //-----------------------------------------------------------------------------
        // Used by ViewPager; can be used by app as well.
        // Returns the total number of pages that the ViewPage can display.  This must
        // never be 0.
        @Override
        public int getCount ()
        {
            return views.size();
        }

        //-----------------------------------------------------------------------------
        // Used by ViewPager.
        @Override
        public boolean isViewFromObject (View view, Object object)
        {
            return view == object;
        }

        //-----------------------------------------------------------------------------
        // Add "view" to right end of "views".
        // Returns the position of the new view.
        // The app should call this to add pages; not used by ViewPager.
        public int addView (View v)
        {
            return addView (v, views.size());
        }

        //-----------------------------------------------------------------------------
        // Add "view" at "position" to "views".
        // Returns position of new view.
        // The app should call this to add pages; not used by ViewPager.
        public int addView (View v, int position)
        {
            views.add (position, v);
            return position;
        }

        //-----------------------------------------------------------------------------
        // Removes "view" from "views".
        // Retuns position of removed view.
        // The app should call this to remove pages; not used by ViewPager.
        public int removeView (ViewPager pager, View v)
        {
            return removeView (pager, views.indexOf (v));
        }

        //-----------------------------------------------------------------------------
        // Removes the "view" at "position" from "views".
        // Retuns position of removed view.
        // The app should call this to remove pages; not used by ViewPager.
        public int removeView (ViewPager pager, int position)
        {
            // ViewPager doesn't have a delete method; the closest is to set the adapter
            // again.  When doing so, it deletes all its views.  Then we can delete the view
            // from from the adapter and finally set the adapter to the pager again.  Note
            // that we set the adapter to null before removing the view from "views" - that's
            // because while ViewPager deletes all its views, it will call destroyItem which
            // will in turn cause a null pointer ref.
            pager.setAdapter (null);
            views.remove (position);
            pager.setAdapter (this);

            return position;
        }

        //-----------------------------------------------------------------------------
        // Returns the "view" at "position".
        // The app should call this to retrieve a view; not used by ViewPager.
        public View getView (int position)
        {
            return views.get (position);
        }

        // Other relevant methods:

        // finishUpdate - called by the ViewPager - we don't care about what pages the
        // pager is displaying so we don't use this method.
    }

    public static class ScheduleFragment extends Fragment implements View.OnClickListener {
        int mNum;
        OnSharkNetPass sharkNetPasser;
        SchoolMetadata schoolMetadata = sharkNetPasser.getSharkNet().getSchoolMetadata();
        HashMap<Integer, Date> im = schoolMetadata.getIndexMatrixOfDaysWithoutWeekdays(schoolMetadata.getStartSummerSemester(), schoolMetadata.getEndSummerSemester());

        ImageButton btnWeekdayLessonZeroHomework;
        ImageButton btnWeekdayLessonOneHomework;
        ImageButton btnWeekdayLessonTwoHomework;
        ImageButton btnWeekdayLessonThreeHomework;
        ImageButton btnWeekdayLessonFourHomework;
        ImageButton btnWeekdayLessonFiveHomework;
        ImageButton btnWeekdayLessonSixHomework;
        ImageButton btnWeekdayLessonSevenHomework;
        ImageButton btnWeekdayLessonEightHomework;
        ImageButton btnWeekdayLessonNineHomework;

        /**
         * Create a new instance of CountingFragment, providing "num"
         * as an argument.
         */
        static ScheduleFragment newInstance(int num) {
            ScheduleFragment f = new ScheduleFragment();

            // Supply num input as an argument.
            Bundle args = new Bundle();
            args.putInt("num", num);
            f.setArguments(args);

            return f;
        }

        @Override
        public void onAttach(Context context) {
            super.onAttach(context);
            Activity activity = getActivity();
            sharkNetPasser = (OnSharkNetPass) activity;
        }

        /**
         * When creating, retrieve this instance number from its arguments.
         */
        @Override
        public void onCreate(Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            mNum = getArguments() != null ? getArguments().getInt("num") : 1;
        }

        /**
         * The Fragment's UI is just a simple text view showing its
         * instance number.
         */
        @Override
        public View onCreateView(LayoutInflater inflater, ViewGroup container,
                                 Bundle savedInstanceState) {


            View v = inflater.inflate(R.layout.digital_schedule_fragment_object, container, false);
            Calendar c = Calendar.getInstance();
            c.setTime(im.get(mNum));
            Boolean free = false;
            for (int i = 0; i < schoolMetadata.getDayOff().size(); i++) {
                Calendar c2 = Calendar.getInstance();
                c2.setTime(schoolMetadata.getDayOff().get(i));
                if (c.get(Calendar.DAY_OF_MONTH) == c2.get(Calendar.DAY_OF_MONTH) && c.get(Calendar.MONTH) == c2.get(Calendar.MONTH) && c.get(Calendar.YEAR) == c2.get(Calendar.YEAR)) {
                    free = true;
                }
            }
            String date;
            if (free) {
                date = "Kein Unterricht am " + getWeekday(c.get(Calendar.DAY_OF_WEEK)) + " den " + c.get(Calendar.DAY_OF_MONTH) + "." + (c.get(Calendar.MONTH) + 1) + "." + c.get(Calendar.YEAR);
            } else {
                date = getWeekday(c.get(Calendar.DAY_OF_WEEK)) + " der " + c.get(Calendar.DAY_OF_MONTH) + "." + (c.get(Calendar.MONTH) + 1) + "." + c.get(Calendar.YEAR);
            }
            View tv = v.findViewById(R.id.tvWeekdayDate);
            ((TextView) tv).setText(date);

            Calendar lessonTime = Calendar.getInstance();
            lessonTime.setTime(schoolMetadata.getStartEarliestLesson());
            ConfigureWeekdays.calculateWeekdayLessonTimes(v, schoolMetadata.getBreaks(), lessonTime, schoolMetadata.getLessonDurationInMinutes());

            ScheduleWeek configuredScheduleWeek = sharkNetPasser.getSharkNet().getMyProfile().getScheduleWeek();
            if (c.get(Calendar.DAY_OF_WEEK) == Calendar.MONDAY) {
                ConfigureWeekdays.initializeDigitalSchedule(v, configuredScheduleWeek.getMondayLessonNames(), configuredScheduleWeek.getMondayTeachers(),
                        configuredScheduleWeek.getMondayRooms());
            } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.TUESDAY) {
                ConfigureWeekdays.initializeDigitalSchedule(v, configuredScheduleWeek.getTuesdayLessonNames(), configuredScheduleWeek.getTuesdayTeachers(),
                        configuredScheduleWeek.getTuesdayRooms());
            } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.WEDNESDAY) {
                ConfigureWeekdays.initializeDigitalSchedule(v, configuredScheduleWeek.getWednesdayLessonNames(), configuredScheduleWeek.getWednesdayTeachers(),
                        configuredScheduleWeek.getWednesdayRooms());
            } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.THURSDAY) {
                ConfigureWeekdays.initializeDigitalSchedule(v, configuredScheduleWeek.getThursdayLessonNames(), configuredScheduleWeek.getThursdayTeachers(),
                        configuredScheduleWeek.getThursdayRooms());
            } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.FRIDAY) {
                ConfigureWeekdays.initializeDigitalSchedule(v, configuredScheduleWeek.getFridayLessonNames(), configuredScheduleWeek.getFridayTeachers(),
                        configuredScheduleWeek.getFridayRooms());
            }

            btnWeekdayLessonZeroHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonZeroHomework);
            btnWeekdayLessonOneHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonOneHomework);
            btnWeekdayLessonTwoHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonTwoHomework);
            btnWeekdayLessonThreeHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonThreeHomework);
            btnWeekdayLessonFourHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonFourHomework);
            btnWeekdayLessonFiveHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonFiveHomework);
            btnWeekdayLessonSixHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonSixHomework);
            btnWeekdayLessonSevenHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonSevenHomework);
            btnWeekdayLessonEightHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonEightHomework);
            btnWeekdayLessonNineHomework = (ImageButton) v.findViewById(R.id.btnWeekdayLessonNineHomework);

            btnWeekdayLessonZeroHomework.setOnClickListener(this);
            btnWeekdayLessonOneHomework.setOnClickListener(this);
            btnWeekdayLessonTwoHomework.setOnClickListener(this);
            btnWeekdayLessonThreeHomework.setOnClickListener(this);
            btnWeekdayLessonFourHomework.setOnClickListener(this);
            btnWeekdayLessonFiveHomework.setOnClickListener(this);
            btnWeekdayLessonSixHomework.setOnClickListener(this);
            btnWeekdayLessonSevenHomework.setOnClickListener(this);
            btnWeekdayLessonEightHomework.setOnClickListener(this);
            btnWeekdayLessonNineHomework.setOnClickListener(this);

            return v;
        }

        @Override
        public void onActivityCreated(Bundle savedInstanceState) {
            super.onActivityCreated(savedInstanceState);

        }

        private String[] getWeekdayAttributes(Date fragmentDate, int resultNumber) {
            Calendar c = Calendar.getInstance();
            c.setTime(fragmentDate);
            ScheduleWeek configuredScheduleWeek = sharkNetPasser.getSharkNet().getMyProfile().getScheduleWeek();
            if (c.get(Calendar.DAY_OF_WEEK) == Calendar.MONDAY) {
                if (resultNumber == 0) {
                    return configuredScheduleWeek.getMondayLessonNames();
                } else if (resultNumber == 1) {
                    return configuredScheduleWeek.getMondayTeachers();
                } else if (resultNumber == 2) {
                    return configuredScheduleWeek.getMondayRooms();
                } else {
                    throw new IllegalArgumentException("resultNumber can only be 0 für LessonNames, 1 for Teachers or 2 for Rooms!");
                }
            } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.TUESDAY) {
                if (resultNumber == 0) {
                    return configuredScheduleWeek.getTuesdayLessonNames();
                } else if (resultNumber == 1) {
                    return configuredScheduleWeek.getTuesdayTeachers();
                } else if (resultNumber == 2) {
                    return configuredScheduleWeek.getTuesdayRooms();
                } else {
                    throw new IllegalArgumentException("resultNumber can only be 0 für LessonNames, 1 for Teachers or 2 for Rooms!");
                }
            } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.WEDNESDAY) {
                if (resultNumber == 0) {
                    return configuredScheduleWeek.getWednesdayLessonNames();
                } else if (resultNumber == 1) {
                    return configuredScheduleWeek.getWednesdayTeachers();
                } else if (resultNumber == 2) {
                    return configuredScheduleWeek.getWednesdayRooms();
                } else {
                    throw new IllegalArgumentException("resultNumber can only be 0 für LessonNames, 1 for Teachers or 2 for Rooms!");
                }
            } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.THURSDAY) {
                if (resultNumber == 0) {
                    return configuredScheduleWeek.getThursdayLessonNames();
                } else if (resultNumber == 1) {
                    return configuredScheduleWeek.getThursdayTeachers();
                } else if (resultNumber == 2) {
                    return configuredScheduleWeek.getThursdayRooms();
                } else {
                    throw new IllegalArgumentException("resultNumber can only be 0 für LessonNames, 1 for Teachers or 2 for Rooms!");
                }
            } else if (c.get(Calendar.DAY_OF_WEEK) == Calendar.FRIDAY) {
                if (resultNumber == 0) {
                    return configuredScheduleWeek.getFridayLessonNames();
                } else if (resultNumber == 1) {
                    return configuredScheduleWeek.getFridayTeachers();
                } else if (resultNumber == 2) {
                    return configuredScheduleWeek.getFridayRooms();
                } else {
                    throw new IllegalArgumentException("resultNumber can only be 0 für LessonNames, 1 for Teachers or 2 for Rooms!");
                }
            } else {
                throw new IllegalStateException("The calender points not on a weekday, but on weekend! Should only point on weekdays.");
            }
        }

        @Override
        public void onClick(View v) {
            Intent homeworkIntent = new Intent(getContext(), HomeworkActivity.class);
            Date fragmentDate = im.get(mNum);
            Homework ha;
            switch (v.getId()) {
                case R.id.btnWeekdayLessonZeroHomework:
                    ha = new ImplHomework(fragmentDate, getWeekdayAttributes(fragmentDate, 0)[0], getWeekdayAttributes(fragmentDate, 1)[0], getWeekdayAttributes(fragmentDate, 2)[0], 0);
                    homeworkIntent.putExtra(HOMEWORK, ha);
                    startActivityForResult(homeworkIntent, 0);
                    break;
                case R.id.btnWeekdayLessonOneHomework:
                    ha = new ImplHomework(fragmentDate, getWeekdayAttributes(fragmentDate, 0)[1], getWeekdayAttributes(fragmentDate, 1)[1], getWeekdayAttributes(fragmentDate, 2)[1], 1);
                    homeworkIntent.putExtra(HOMEWORK, ha);
                    startActivityForResult(homeworkIntent, 1);
                    break;
                case R.id.btnWeekdayLessonTwoHomework:
                    ha = new ImplHomework(fragmentDate, getWeekdayAttributes(fragmentDate, 0)[2], getWeekdayAttributes(fragmentDate, 1)[2], getWeekdayAttributes(fragmentDate, 2)[2], 2);
                    homeworkIntent.putExtra(HOMEWORK, ha);
                    startActivityForResult(homeworkIntent, 2);
                    break;
                case R.id.btnWeekdayLessonThreeHomework:
                    ha = new ImplHomework(fragmentDate, getWeekdayAttributes(fragmentDate, 0)[3], getWeekdayAttributes(fragmentDate, 1)[3], getWeekdayAttributes(fragmentDate, 2)[3], 3);
                    homeworkIntent.putExtra(HOMEWORK, ha);
                    startActivityForResult(homeworkIntent, 3);
                    break;
                case R.id.btnWeekdayLessonFourHomework:
                    ha = new ImplHomework(fragmentDate, getWeekdayAttributes(fragmentDate, 0)[4], getWeekdayAttributes(fragmentDate, 1)[4], getWeekdayAttributes(fragmentDate, 2)[4], 4);
                    homeworkIntent.putExtra(HOMEWORK, ha);
                    startActivityForResult(homeworkIntent, 4);
                    break;
                case R.id.btnWeekdayLessonFiveHomework:
                    ha = new ImplHomework(fragmentDate, getWeekdayAttributes(fragmentDate, 0)[5], getWeekdayAttributes(fragmentDate, 1)[5], getWeekdayAttributes(fragmentDate, 2)[5], 5);
                    homeworkIntent.putExtra(HOMEWORK, ha);
                    startActivityForResult(homeworkIntent, 5);
                    break;
                case R.id.btnWeekdayLessonSixHomework:
                    ha = new ImplHomework(fragmentDate, getWeekdayAttributes(fragmentDate, 0)[6], getWeekdayAttributes(fragmentDate, 1)[6], getWeekdayAttributes(fragmentDate, 2)[6], 6);
                    homeworkIntent.putExtra(HOMEWORK, ha);
                    startActivityForResult(homeworkIntent, 6);
                    break;
                case R.id.btnWeekdayLessonSevenHomework:
                    ha = new ImplHomework(fragmentDate, getWeekdayAttributes(fragmentDate, 0)[7], getWeekdayAttributes(fragmentDate, 1)[7], getWeekdayAttributes(fragmentDate, 2)[7], 7);
                    homeworkIntent.putExtra(HOMEWORK, ha);
                    startActivityForResult(homeworkIntent, 7);
                    break;
                case R.id.btnWeekdayLessonEightHomework:
                    ha = new ImplHomework(fragmentDate, getWeekdayAttributes(fragmentDate, 0)[8], getWeekdayAttributes(fragmentDate, 1)[8], getWeekdayAttributes(fragmentDate, 2)[8], 8);
                    homeworkIntent.putExtra(HOMEWORK, ha);
                    startActivityForResult(homeworkIntent, 8);
                    break;
                case R.id.btnWeekdayLessonNineHomework:
                    ha = new ImplHomework(fragmentDate, getWeekdayAttributes(fragmentDate, 0)[9], getWeekdayAttributes(fragmentDate, 1)[9], getWeekdayAttributes(fragmentDate, 2)[9], 9);
                    homeworkIntent.putExtra(HOMEWORK, ha);
                    startActivityForResult(homeworkIntent, 9);
                    break;
            }
        }
    }


        @Override
        public boolean onCreateOptionsMenu(Menu menu) {
            getMenuInflater().inflate(R.menu.main_activity, menu);
            menu.add(0, MENU_CREATE_PROFILE_ID, 0, "Meine Daten");
            menu.add(0, MENU_CONFIGURE_SCHEDULE_WEEK_ID, 0, "Wochen Stundenplan anpassen");
            menu.add(0, MENU_SETTINGS_ID, 0, "Einstellungen");
            menu.add(0, MENU_QUIT_ID, 0, "Beenden");
            return super.onCreateOptionsMenu(menu);
        }

        @Override
        public boolean onOptionsItemSelected(MenuItem item) {
            switch (item.getItemId()) {
                case MENU_CREATE_PROFILE_ID:
                    Intent createProfileIntent = new Intent(this, ProfileDataActivity.class);
                    startActivityForResult(createProfileIntent, MENU_CREATE_PROFILE_ID);
                    break;
                case MENU_CONFIGURE_SCHEDULE_WEEK_ID:
                    Intent configureScheduleWeekIntent = new Intent(this, FragmentPagerSupport.class);
                    ImplScheduleWeek parcelableScheduleWeek = new ImplScheduleWeek(sharkNet.getMyProfile().getScheduleWeek());
                    configureScheduleWeekIntent.putExtra(CONFIGURED_SCHEDULE_WEEK, parcelableScheduleWeek);
                    configureScheduleWeekIntent.putExtra(METADATA_BUNDLE, createBundleWith3StringArrays());
                    startActivityForResult(configureScheduleWeekIntent, MENU_CONFIGURE_SCHEDULE_WEEK_ID);
                    break;
                case MENU_SETTINGS_ID:
                    Intent settingsIntent = new Intent(this, SettingsActivity.class);
                    startActivityForResult(settingsIntent, MENU_SETTINGS_ID);
                    break;
                case MENU_QUIT_ID:
                    //exit
                    finish();
                    break;
            }
            return super.onOptionsItemSelected(item);
        }

        @Override
        protected void onActivityResult(int requestCode, int resultCode, Intent data) {
            switch (requestCode) {
                case MENU_CONFIGURE_SCHEDULE_WEEK_ID:
                    if (resultCode == RESULT_OK) {
                        ImplScheduleWeek configuredScheduleWeek = data.getParcelableExtra(CONFIGURED_SCHEDULE_WEEK);
                        sharkNet.getMyProfile().setScheduleWeek(configuredScheduleWeek);
                        pagerAdapter.notifyDataSetChanged();

                        Intent configureScheduleWeekIntent = new Intent(this, FragmentPagerSupport.class);
                        ImplScheduleWeek parcelableScheduleWeek = new ImplScheduleWeek(sharkNet.getMyProfile().getScheduleWeek());
                        configureScheduleWeekIntent.putExtra(CONFIGURED_SCHEDULE_WEEK, parcelableScheduleWeek);
                        configureScheduleWeekIntent.putExtra(METADATA_BUNDLE, createBundleWith3StringArrays());
                        startActivityForResult(configureScheduleWeekIntent, MENU_CONFIGURE_SCHEDULE_WEEK_ID);
                    } else if (resultCode == RESULT_CANCELED) {
                        Toast.makeText(this, "Stundenplan wurde Aktualisiert", Toast.LENGTH_LONG).show();
                    }
                    break;
            }
        }

        private ScheduleWeek fillConfiguredScheduleWeekWithDummyData(ScheduleWeek configuredScheduleWeek) {
            configuredScheduleWeek.setMondayLessonNames(new String[]{"Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach"});
            configuredScheduleWeek.setTuesdayLessonNames(new String[]{"Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach"});
            configuredScheduleWeek.setWednesdayLessonNames(new String[]{"Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach"});
            configuredScheduleWeek.setThursdayLessonNames(new String[]{"Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach"});
            configuredScheduleWeek.setFridayLessonNames(new String[]{"Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach", "Fach"});

            configuredScheduleWeek.setMondayTeachers(new String[]{"Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer"});
            configuredScheduleWeek.setTuesdayTeachers(new String[]{"Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer"});
            configuredScheduleWeek.setWednesdayTeachers(new String[]{"Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer"});
            configuredScheduleWeek.setThursdayTeachers(new String[]{"Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer"});
            configuredScheduleWeek.setFridayTeachers(new String[]{"Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer", "Lehrer"});

            configuredScheduleWeek.setMondayRooms(new String[]{"Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum"});
            configuredScheduleWeek.setTuesdayRooms(new String[]{"Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum"});
            configuredScheduleWeek.setWednesdayRooms(new String[]{"Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum"});
            configuredScheduleWeek.setThursdayRooms(new String[]{"Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum"});
            configuredScheduleWeek.setFridayRooms(new String[]{"Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum", "Raum"});

            configuredScheduleWeek.setMondayPeriods(new String[]{"wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich"});
            configuredScheduleWeek.setTuesdayPeriods(new String[]{"wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich"});
            configuredScheduleWeek.setWednesdayPeriods(new String[]{"wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich"});
            configuredScheduleWeek.setThursdayPeriods(new String[]{"wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich"});
            configuredScheduleWeek.setFridayPeriods(new String[]{"wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich", "wöchentlich"});

            return configuredScheduleWeek;
        }

        private Bundle createBundleWith3StringArrays() {
            Bundle b = new Bundle();
            b.putStringArrayList(LESSON_NAMES, sharkNet.getSchoolMetadata().getLessonNames());
            b.putStringArrayList(TEACHERS, sharkNet.getSchoolMetadata().getTeacherNames());
            b.putStringArrayList(ROOMS, sharkNet.getSchoolMetadata().getRooms());
            return b;
        }

        private static String getWeekday(int numberOfWeekday) {
            if (numberOfWeekday == 1) return Weekday.Sonntag.toString();
            else if (numberOfWeekday == 2) return Weekday.Montag.toString();
            else if (numberOfWeekday == 3) return Weekday.Dienstag.toString();
            else if (numberOfWeekday == 4) return Weekday.Mittwoch.toString();
            else if (numberOfWeekday == 5) return Weekday.Donnerstag.toString();
            else if (numberOfWeekday == 6) return Weekday.Freitag.toString();
            else if (numberOfWeekday == 7) return Weekday.Samstag.toString();
            else throw new IllegalArgumentException();
        }
    }
